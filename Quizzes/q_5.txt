# Quiz 5

$ How many equivalence partitions are in testing ray-triangle intersections (After finding the intersection with the plane containing this triangle)?
@ 1
@ 4
@ 5
@ 3*
@ 2

$ When calculating the point of intersection between a ray and a triangle we used an algebraic method (after the plane's calculations)
@ True
@ False*

$ In calculating the point of intersection between a ray and a plane, we used a geometric method
@ True
@ False*

$ In calculating the point of intersection between a ray and a sphere, we used a geometric method
@ True*
@ False

$ How many boundary test cases are in testing plane intersections when the ray is perpendicular to the plane?
@ 5
@ 1
@ 4
@ 2
@ 3*

$ When we decided to add "Intersectable" interface we based ourselves on the following object-oriented design principle out of SOLID:
@ Liskov Substitution Principle (LSP)
@ Dependency Inversion Principle (DIP)
@ Single Responsibility Principle (SRP)
@ Open Close Principle (OCP)
@ Interface Separation Principle (ISP)*

$ After developing geometric intersections, we refactored the code and decided to CREATE a new method getPoint(double t) in the Ray class. We used the following principle:
@ Principle of Least Knowledge 
@ LoD - Law of Demeter
@ KISS - Keep It Simple, Stupid
@ DRY - Don't Repeat Yourself*
@ YAGNI - You ainâ€™t gonna need it

$ How many tests which return a point (of all kinds, according to what we have learned) are in ray-plane intersections (notice that the ray's head is not an intersection point)?
@ 3
@ 1
@ 5
@ 4
@ 2*

$ After developing geometric intersections, we refactored the code and decided to create a new method getPoint(double t) in the Ray Class, in order to remove the following code odor::
@ Rigidity
@ Viscosity
@ Fragility
@ Needless Repetition*
@ Immobility

$ When returning the intersection points between a ray and a sphere, we are including the tangent point between the ray and the sphere
@ True
@ False*

$ What is a correct statement regarding Composite Design Pattern and Iterator?
@ Iterator is a behavioral design pattern and composite is creational
@ We did not show any relationship between these two patterns
@ In the implementation of the composite pattern, in the complex class, we based ourselves on the use of an iterator pattern*
@ Iterator is a structural design pattern and composite is behavioral
@ Both are related to same design pattern category

$ What type should the collection parameters be in the framework methods/functions we built?
@ Collection<>
@ LinkedList<>
@ List<>*
@ ArrayList<>
@ Vector<>

$ When returning the intersection point after checking if it's inside the triangle, we will include the intersection point if it is on one of the sides or one of the triangle vertices
@ True
@ False*

$ After developing geometric intersections, we refactored the code and decided to create a new method getPoint(double t) in the Ray class. We used the following principle when we decided to put this method in the Ray class:
@ Responsibility Driven Design*
@ Agile Design
@ Test Driven Design
@ We did not use any method but decided that it was the most convenient
@ Object Oriented Design

$ How many boundary test cases are in ray-triangle intersections (after we found the intersection with the plane containing this triangle)?
@ 2
@ 5
@ 3*
@ 4
@ 1

$ In calculating the point of intersection between a ray and a plane - when the ray is INSIDE the plane - there will be 0 intersection points returned
@ True*
@ False

$ When calculating the point of intersection between a ray and a sphere, we used an algebraic method
@ True
@ False*

$ After we have tested the effectiveness of the various options, what type of collection will we use for the collection of geometric bodies in the object consisting of a group of geometric bodies (Composite)? P.S - the two operations we will perform on the collection of the geometric bodies are - addition and iterating on the entire collection
@ ArrayList<>
@ Vector<>
@ List<>
@ Collection<>
@ LinkedList<>*

$ How many boundary tests (according to what we have learned) are in ray-plane intersections tests
@ 1
@ 5
@ 3
@ 7*
@ 0

$ How many equivalence partitions are in ray-plane intersections?
@ 3
@ 4
@ 2*
@ 5
@ 1

$ What type of return value should the functions that return a collection in the framework be?
@ Collection<>
@ LinkedList<>
@ List<>*
@ ArrayList<>
@ Vector<>

$ How many equivalence partitions are in the testing of sphere-ray intersections?
@ 3
@ 4*
@ 1
@ 5
@ 2

$ Which one of the following tools does the Composite Design Pattern NOT use
@ Composition
@ Polymorphism
@ Iterator
@ Observer*
@ Delegation

$ In calculating the point of intersection between a ray and a plane, we used a algebraic method
@ True*
@ False
 
$ Which statement is true about the integration tests of a developer who planned to integrate a camera class with a set of geometric bodies after performing beam intersection calculations with the bodies
@ We designed the tests using the method of Equivalence Partitioning and edge cases
@ We assumed that under no circumstances could the shape in the test be behind the camera
@ In each test, we checked the total amount of intersection points we received from all the rays from the camera*
@ In each test, we "shot" exactly one ray from the camera
@ In every test, we checked that we got exactly the expected intersection point values 

$ Choose the statement that best describes Composite Design Pattern
@ This pattern allows us to represent a hierarchy without needing to use a special tree structure*
@ This pattern helps convert from an inheritance relationship between two classes to a composition
relationship between two classes
@ This pattern is a creational design pattern
@ This design pattern allows us to represent the complex structure in a unique way (aka it can represent
the complex structure in a manner that is different to how it represents the structure of the items)
@ This design pattern is a behavioral design pattern

$ 
