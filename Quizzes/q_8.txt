#Quiz 8

$ In the framework that we built this semester, the only secondary rays that we considered were the rays that were used for reflection and refraction.
@ True
@ False*

$ The "backlighting" phenomenon that we faced in the implementation of the Phong Model sometimes disappears in the sphere after the implementation of shading
@ True*
@ False

$ Shadow rays are created for each point for which the Phong model is calculated, for each of the external light sources (directional/point/spot)
@ True*
@ False

$ In our first attempt to deal with our distorted picture, we moved the shadow ray's head. This could cause all of the bodies in our picture (both flat and three dimensional) to lose the lighting effect (aka light no longer shines upon them)
@ True*
@ False

$ After our first attempt in moving the shadow ray’s head in order to deal with image distortions in the initial implementation of shading, ONLY flat bodies could lose the lighting effect on them 
@ True
@ False*

$ The creation of shadow rays is identical to the creation of camera rays.
@ True
@ False*

$ In our first attempt to deal with our distorted picture, we moved the shadow ray's head towards the light (aka we already have a vector, which is the direction from the point to the light source; we now move the point up from its original position to another place on this vector, which is closer to the light source).
@ True
@ False*

$ In the Phong Model, we add the effect of a light source if its shadow ray intersects geometric bodies in the scene (aka geometries between the light source and the point whose color is being calculated).
@ True
@ False*

$ After our first implementation of unshaded, our picture was messed up. It seemed to be that the light source(s) was/were shaded in places that there should not be any shading and we see a spotted picture. This could be caused by the fact that the head of the ray was included in the list of intersection points.
@ True*
@ False

$ In the implementation of the shading, after we discovered that flat bodies lost their lighting (they appear without any light shining on them even though light is clearly hitting them), we added in the unshaded method, a test to see if the geometric body (where we found the intersection point) is flat. (The test was carried out using the FlatGeometry "marking interface" that we created especially for this test). We then said that this test is still a BAD design. What was the main drawback?
@ Law of Demeter - LoD
@ Rigidity
@ Fragility
@ Low coupling*
@ High cohesion

$ Cash Cow is an antipattern in which an organization's profits are reliant on existing products, as well as existing customers and there's absolutely no interest in taking on new clients, new products or even improving existing products.
@ True*
@ False

$ Action at a Distance is the antipattern where there is code that is using specific data, and yet, that same data may change in other unexpected places and at unexpected times.
@ True*
@ False

$ The antipattern Functional Decomposition is the remnant of an era when programming languages were imperative-procedural and that each class did only one thing and that class's name was similar to its method's name.
@ True*
@ False

$ Which of the following statements about the Marker Interface pattern is most accurate?
@ The Marker Interface pattern is a highly accepted design pattern and is widely used.
@ The Marker Interface pattern does not break any Object Oriented design principles
@ The Marker Interface pattern is an antipattern*
@ The Marker Interface pattern represents and makes good use of the concept and goals of an interface in Object Oriented Development
@ In the final solution for the framework that we built, we used the Marker Interface pattern to handle shading for flat objects(e.g. triangle, polygon, sphere)

$ The Yo-Yo antipattern represents the usage of many small classes which results in a system structure that is both difficult to understand as well as difficult to navigate
@ True*
@ False

$ The Agile Development Method can often lead to which antipattern
@ None of the other antipatterns is correct
@ Lava Flow - ancient code that nobody dares to touch
@ BLOB - large classes with many superfluous attributes and methods
@ Spaghetti Code – long and complicated
@ Poltergeist - irrelevant classes will suddenly appear*

$ The book on antipatterns (that was presented in the lecture) was inspired by the book on Design Patterns that was authored by the Gang of Four.
@ True*
@ False

$ The Hard Code antipattern represents code that is hard to understand.
@ True
@ False*

$ In a scene that has at least one body and one light source and without acceleration improvements, for an intersection point on a body that is both reflective and transparent, we will create exactly two secondary rays
@ True
@ False*

$ In a scene that has at least one body and one light source (and we have not yet added runtime improvement), for every primary ray, we need to create at least one secondary ray
@ True
@ False*

$ When creating a reflective ray for an intersection point, we needed to create a new vector (a new direction) - we used the normal (vector) of the intersection point in order to create this new direction
@ True*
@ False

$ In the function calcColor, when we were calculating the color of an intersection point, we took into account the effect of shadowing (aka the intersection point was being blocked by another object in the scene from the light). We consider shadowing to be a global effect
@ True
@ False*

$ If an intersection point lies on a mirrored object, then its color can be affected by other objects that are in the same scene. This is an example of a global effect
@ True*
@ False

$ In a scene which has bodies that are either reflective or transparent, we can right away calculate exactly how many intersections there will be with other bodies in the scene without having to know where the other bodies are found in the scene
@ True
@ False*

$ The rays the we create in order to check shading (aka shadow rays) are secondary rays
@ True*
@ False

$ When we see a rainbow in front of us, it means that the sun (the light source) is also in front of us (obviously after the rain has subsided)
@ True
@ False*

$ In any given material, the refractive index is the same for all wavelengths of light in the material
@ True
@ False*

$ The refractive index of any material falls within the following numerical range:
@ All possible numbers (positive and negative)
@ All positive numbers from 1 and up (only)*
@ All numbers between 0 and 1 (only)
@ All positive numbers (only)
@ All negative numbers (only)

$ The refractive index of a material is the ratio between the speed of light in the material and the speed of light in a vacuum
@ True*
@ False

$ A critical angle is defined as the angle in which - if the incidence of the light ray is smaller than the critical angle then there will be a refraction of light, and if the incidence of the light ray is greater than or equal to the critical angle then there will be a complete reflection of light
@ True*
@ False

$ In a realistic picture the sum of the following attenuation coefficients should not exceed 1: 
kD + kS + kT ≤ 1
@ True*
@ False

$ In a realistic picture the sum of the following attenuation coefficients should not exceed 1: 
kD + kR + kT ≤ 1
@ True*
@ False

$ In the Phong Model, all of the global effects that we have studied required us to add a recursive calculation in the Phong model
@ True*
@ False

$ In a realistic picture, we would need to set the attenuation factor for reflection (kR) to be 0 for the following material:
@ Completely mirror
@ Completely glass
@ Completely non-transparent
@ Completely matte*
@ There is no material for which you should make the kR = 0

$ After our first implementation of unshaded, our picture was messed up.It seemed that all of the external light sources disappeared. This could be caused by the fact that the head of the ray was included in the list of intersection points.
@ True*
@ False

$ When we added the check to the function checkLocalEffects to see if the point whose color we are calculating is shaded from the light source or not, where did we add the check?
@ Immediately AFTER checking that the POV (the head of the ray which we used to find the intersection point) and the light source are on the same side of the surface of the object on which the intersection point is found (aka check the sign of n*l and the sign of n*v are the same)*
@ Immediately after we added the emission light
@ Immediately BEFORE checking that the POV (the head of the ray which we used to find the intersection point) and the light source are on the same side of the surface of the object on which the intersection point is found (aka check the sign of n*l and the sign of n*v are the same)
@ Immediately before we added the emission light
@ We did NOT do this check in the function calcLocalEffects

$ The "backlighting" phenomenon that we faced in the implementation of the Phong Model COMPLETELY resolved after the implementation of shading
@ True
@ False*

$ The Yo-Yo antipattern represents code that has unexpected complexity in all sorts of places
@ True
@ False*

$ The antipattern BLOB is related to using large binary objects (aka Binary Large OBjects)
@ True
@ False*

$ The term antipattern is a general term used for programming errors
@ True
@ False*

$ The Hard Code antipattern represents code that uses multiple literals (explicit values, e.g. 3.14) instead of using a constant identifier (e.g. PI)
@ True*
@ False

$ The Software Bloat antipattern represents writing classes and interfaces that are too large and bloated
@ True
@ False*

$ Singleton is basically an antipattern
@ True
@ False*

$ One of the solutions to dealing with Action at a Distance, is the use of immutable objects
@ True*
@ False

$ The effect of light sources (diffusive and specular) on an intersection point is a local effect
@ True*
@ False

$ The effect of the color of other bodies on the intersection point of a reflective body is a global effect (effect)
@ True*
@ False

$ The rays we create from Camera are secondary rays
@ True
@ False*

$ A critical angle is the largest angle, at which, a light ray can hit the boundary between two materials and there will still be refraction of light (that is, part of the light will pass from the first material to the second material) and at a greater angle of incidence there will be complete reflection of the light
@ True
@ False*

$ According to Snell's law, when a ray passes from material 1 to material 2, the ratio between the sine of the ray angle (between the ray and the normal to the boundary between the materials) in material 1 and the sine of the ray angle in material 2 is equal to the ratio between the refractive index in material 1 and the refractive index in material 2
@ True
@ False*

$ The phenomenon of the colored rainbow is a result (among other things) of the difference in the speed of light in the material for different wavelengths of light
@ True*
@ False
 
$ The attenuation coefficient of transparency (kT) will be 0 in a realistic picture for the following material:
@ In no material
@ Perfect glass
@ Completely matte material
@ Perfect mirror
@ Completely sealed material*

$ Incorrect use of good design patterns (for example, Singleton) is actually the Golden Hammer anti-pattern 
@ True*
@ False

$ The BLOB antipattern represents constructing a class with low cohesion
@ True*
@ False

$ The Big Ball of Mud antipattern represents constructing large and bloated classes regardless of its parts (low cohesion)
@ True
@ False*

$ The main reason for Snell's law is Fermat's principle, according to which, the path a light ray will travel between two points is the fastest path
@ True*
@ False
 
$ The attenuation coefficient of transparency (kT) will be 1 in a realistic picture for the following material:
@ Perfect glass*
@ Completely matte material
@ Perfect mirror
@ Completely sealed material
@ In no material

$ In the Phong Model, not all the global effects we studied add a recursive calculation in the model
@ True
@ False*

$
